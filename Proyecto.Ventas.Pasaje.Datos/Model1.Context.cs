//------------------------------------------------------------------------------
// <auto-generated>
//    Este código se generó a partir de una plantilla.
//
//    Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//    Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Proyecto.Ventas.Pasaje.Datos
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class VENTAS_PASAJE_ENTITIES : DbContext
    {
        public VENTAS_PASAJE_ENTITIES()
            : base("name=VENTAS_PASAJE_ENTITIES")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<ASIENTO> ASIENTO { get; set; }
        public DbSet<AUXILIAR> AUXILIAR { get; set; }
        public DbSet<BUS> BUS { get; set; }
        public DbSet<CAJA> CAJA { get; set; }
        public DbSet<CAJA_USUARIO> CAJA_USUARIO { get; set; }
        public DbSet<CARGO> CARGO { get; set; }
        public DbSet<CLIENTE> CLIENTE { get; set; }
        public DbSet<DEPARTAMENTO> DEPARTAMENTO { get; set; }
        public DbSet<DETALLE_DEPARTAMENTO_HORARIO> DETALLE_DEPARTAMENTO_HORARIO { get; set; }
        public DbSet<DETALLE_SOLICITUD_ASIENTO> DETALLE_SOLICITUD_ASIENTO { get; set; }
        public DbSet<DETALLE_SOLICITUD_RESERVA> DETALLE_SOLICITUD_RESERVA { get; set; }
        public DbSet<DOSIFICACION> DOSIFICACION { get; set; }
        public DbSet<EMPLEADO> EMPLEADO { get; set; }
        public DbSet<FACTURA> FACTURA { get; set; }
        public DbSet<HORARIO> HORARIO { get; set; }
        public DbSet<INFORMACION_PASAJE> INFORMACION_PASAJE { get; set; }
        public DbSet<ITINERARIO> ITINERARIO { get; set; }
        public DbSet<JURIDICO> JURIDICO { get; set; }
        public DbSet<NATURAL> NATURAL { get; set; }
        public DbSet<SOLICITUD_PASAJE> SOLICITUD_PASAJE { get; set; }
        public DbSet<SOLICITUD_RESERVA> SOLICITUD_RESERVA { get; set; }
        public DbSet<sysdiagrams> sysdiagrams { get; set; }
        public DbSet<TIPO_BUS> TIPO_BUS { get; set; }
        public DbSet<USUARIO> USUARIO { get; set; }
        public DbSet<V_ASIENTO_CLIENTE> V_ASIENTO_CLIENTE { get; set; }
        public DbSet<V_BUSTIPO> V_BUSTIPO { get; set; }
        public DbSet<V_CLIENTE_GENERAL> V_CLIENTE_GENERAL { get; set; }
        public DbSet<V_CLIENTE_JURIDICO> V_CLIENTE_JURIDICO { get; set; }
        public DbSet<V_CLIENTE_NATURAL> V_CLIENTE_NATURAL { get; set; }
        public DbSet<V_DETALLE_VIAJE> V_DETALLE_VIAJE { get; set; }
        public DbSet<V_EMPLEADO_USUARIO> V_EMPLEADO_USUARIO { get; set; }
        public DbSet<V_FACTURA> V_FACTURA { get; set; }
        public DbSet<V_INFORMACION_HORARIO> V_INFORMACION_HORARIO { get; set; }
        public DbSet<V_INFORMACION_ITINERARIOS> V_INFORMACION_ITINERARIOS { get; set; }
        public DbSet<V_ITINERARIO_BUS_ASIENTO> V_ITINERARIO_BUS_ASIENTO { get; set; }
        public DbSet<V_VENTA_EMPLEADO> V_VENTA_EMPLEADO { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
